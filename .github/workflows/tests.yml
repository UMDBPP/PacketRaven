name: tests

on:
  push:
    branches:
      - main
    paths:
      - '**.py'
      - '.github/workflows/tests.yml'
      - 'pyproject.toml'
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout
      - uses: actions/setup-python
      - uses: actions/cache
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: lint-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}
      - run: pip install flake8 oitnb
      - run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - run: oitnb . --check
  test_without_postgres:
    needs: lint
    name: test without PostGreSQL database
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest ]
        python-version: [ '3.8', '3.9', '3.x' ]
        exclude:
          - os: macos-latest
            python-version: '3.x'
          - os: windows-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.x'
    steps:
      - uses: actions/checkout
      - uses: actions/setup-python
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: test-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}
      - run: pip install ".[testing]"
      - run: |
          pytest -m "serial"
          pytest -m "not serial" -n auto
        env:
          APRS_FI_API_KEY: ${{ secrets.APRS_FI_API_KEY }}
          APRS_IS_PASSWORD: ${{ secrets.APRS_IS_PASSWORD }}
  test_with_postgres:
    needs: lint
    name: test with PostGreSQL database
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.8', '3.9', '3.x' ]
    services:
      postgres:
        image: postgis/postgis:13-3.1
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_database
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout
      - uses: actions/setup-python
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: test-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}
      - run: pip install ".[testing]"
      - run: |
          pytest -m "serial"
          pytest -m "not serial" -n auto
        env:
          APRS_FI_API_KEY: ${{ secrets.APRS_FI_API_KEY }}
          APRS_IS_PASSWORD: ${{ secrets.APRS_IS_PASSWORD }}
          POSTGRES_HOSTNAME: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DATABASE: test_database
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: test_password
  test_with_coverage:
    needs: [ lint, test_without_postgres, test_with_postgres ]
    name: test with coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:13-3.1
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_database
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout
      - uses: actions/setup-python
      - uses: actions/cache
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: test-${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('pyproject.toml') }}
      - run: pip install ".[testing]"
      - run: pytest --cov . --cov-report xml:coverage.xml
        env:
          APRS_FI_API_KEY: ${{ secrets.APRS_FI_API_KEY }}
          APRS_IS_PASSWORD: ${{ secrets.APRS_IS_PASSWORD }}
          POSTGRES_HOSTNAME: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DATABASE: test_database
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: test_password
      - run: coverage report
      - uses: codecov/codecov-action
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          fail_ci_if_error: true
